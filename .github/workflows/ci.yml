name: CI Pipeline
description: |
  This workflow orchestrates the CI pipeline for the project.
  It runs type checking, tests, and manages release drafts.
  It also handles PR comments to indicate build status.

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  bump_version_check:
    uses: ./.github/workflows/bump-version.yml
    secrets:
      DCL_BOT_REPO_WORKFLOW_TOKEN: ${{ secrets.DCL_BOT_REPO_WORKFLOW_TOKEN }}

  typechecking:
    if: needs.bump_version_check.outputs.should_run_tests_and_release == 'true'
    needs: [bump_version_check]
    uses: ./.github/workflows/typechecking.yml

  tests:
    if: needs.bump_version_check.outputs.should_run_tests_and_release == 'true'
    needs: [bump_version_check]
    uses: ./.github/workflows/tests.yml

  comment_start:
    if: github.event_name == 'pull_request'
    needs: [typechecking, tests]
    uses: ./.github/workflows/pr-deploy-status.yml
    with:
      pr-number: ${{ github.event.pull_request.number }}
      head-sha: ${{ github.sha }}
      run-id: ${{ github.run_id }}
      run-number: ${{ github.run_number }}
      status: "requested"

  draft_release:
    needs: [typechecking, tests]
    permissions:
      contents: write # Allows this job to create releases
    uses: ./.github/workflows/release.yml
    with:
      dry-run: ${{ github.event_name != 'push' || github.ref_name != 'main' || needs.bump_version_check.outputs.bump != 'yes' }}
      pr-number: ${{ github.event.pull_request.number || 'na' }}
    secrets:
      # Secrets required to sign and notarize the app in MacOS
      MACOS_CSC_LINK: ${{ secrets.MACOS_CSC_LINK }}
      MACOS_CSC_KEY_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
      MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
      MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
      MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
      # Secrets required to sign and notarize the app in Windows
      ES_USERNAME: ${{ secrets.ES_USERNAME }}
      ES_PASSWORD: ${{ secrets.ES_PASSWORD }}
      WINDOWS_CREDENTIAL_ID_SIGNER: ${{ secrets.WINDOWS_CREDENTIAL_ID_SIGNER }}
      ES_TOTP_SECRET: ${{ secrets.ES_TOTP_SECRET }}
      # Segment API Key
      SEGMENT_API_KEY: ${{ secrets.SEGMENT_API_KEY }}
      # Sentry AUTH Token
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      # AWS Secrets
      EXPLORER_TEAM_AWS_ACCESS_KEY_ID: ${{ secrets.EXPLORER_TEAM_AWS_ACCESS_KEY_ID }}
      EXPLORER_TEAM_AWS_SECRET_ACCESS_KEY: ${{ secrets.EXPLORER_TEAM_AWS_SECRET_ACCESS_KEY }}
      EXPLORER_TEAM_AWS_DEFAULT_REGION: ${{ secrets.EXPLORER_TEAM_AWS_DEFAULT_REGION }}
      EXPLORER_TEAM_S3_BUCKET: ${{ secrets.EXPLORER_TEAM_S3_BUCKET }}
      # DEV AWS Secrets
      DEV_EXPLORER_TEAM_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_EXPLORER_TEAM_AWS_ACCESS_KEY_ID }}
      DEV_EXPLORER_TEAM_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_EXPLORER_TEAM_AWS_SECRET_ACCESS_KEY }}
      DEV_EXPLORER_TEAM_AWS_DEFAULT_REGION: ${{ secrets.DEV_EXPLORER_TEAM_AWS_DEFAULT_REGION }}
      DEV_EXPLORER_TEAM_S3_BUCKET: ${{ secrets.DEV_EXPLORER_TEAM_S3_BUCKET }}
      # Tauri Secrets
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

  comment_end:
    if: github.event_name == 'pull_request' && needs.bump_version_check.outputs.should_run_tests_and_release == 'true' && always()
    needs: [draft_release]
    uses: ./.github/workflows/pr-deploy-status.yml
    with:
      pr-number: ${{ github.event.pull_request.number }}
      head-sha: ${{ github.sha }}
      run-id: ${{ github.run_id }}
      run-number: ${{ github.run_number }}
      status: "completed"
      conclusion: ${{ needs.draft_release.result }}

  check_release_status:
    needs: [draft_release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check draft_release result
        run: |
          result="${{ needs.draft_release.result }}"
          echo "draft_release result: $result"
          if [[ "$result" == "success" ]] || [[ "$result" == "skipped" ]]; then
            echo "Release completed or skipped."
          else
            echo "Release failed (result: $result)"
            exit 1
          fi
