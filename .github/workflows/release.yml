name: Release
on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean
    secrets:
      MACOS_CSC_LINK:
        description: 'Certificate to sign dmg file'
        required: true
      MACOS_CSC_KEY_PASSWORD:
        description: 'Password to decrypt the certificate file'
        required: true
      MACOS_NOTARIZATION_APPLE_ID:
        description: 'Apple ID used for notarization'
        required: true
      MACOS_NOTARIZATION_TEAM_ID:
        description: 'Team ID used for notarization'
        required: true
      MACOS_NOTARIZATION_PWD:
        description: 'Password used for notarization'
        required: true
      ES_USERNAME:
        description: 'Username to sign exe file'
        required: true
      ES_PASSWORD:
        description: 'Password to sign the exe file'
        required: true
      WINDOWS_CREDENTIAL_ID_SIGNER:
        description: 'Certificate to sign the exe file'
        required: true
      ES_TOTP_SECRET:
        description: 'Password to decrypt the certificate file'
        required: true
      SEGMENT_API_KEY: 
        description: 'Segment API key'
        required: true
      SENTRY_AUTH_TOKEN:
        description: 'Sentry auth token'
        required: true
      SENTRY_DSN:
        description: 'Sentry DSN to perform the requests'
        required: true
      EXPLORER_TEAM_S3_BUCKET:
        required: true

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

env:
  VITE_AWS_S3_BUCKET_PUBLIC_URL: ${{ vars.EXPLORER_TEAM_S3_BUCKET_PUBLIC_URL }}
  PROJECT_PATH: src-tauri

jobs:
  draft_release:

    permissions:
      contents: write # Allows this job to create releases

    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-targets: true
          cache-provider: github

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - run: npm ci
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - run: npm run build
        env:
          MODE: production
          DRY_RUN: ${{ inputs.dry-run }}
          # Segment API Key
          VITE_SEGMENT_API_KEY: ${{ secrets.SEGMENT_API_KEY }}
          # Sentry AUTH Token
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Generate Release Version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: ""
          version_format: ${major}.${minor}.${patch}
          major_pattern: "/^(major|breaking).+/"
          minor_pattern: "/^(minor|feat).+/"
          bump_each_commit: false
          bump_each_commit_patch_pattern: "/^(patch|fix).+/"
          search_commit_body: true
          user_format_type: "json"

      # Download 'SSLcom/esigner-codesign' to a folder called 'esigner-codesign' in the root of the project
      - name: Checkout esigner-codesign repository (Windows)
        if: matrix.os == 'windows-latest' && github.ref == 'refs/heads/main' && !inputs.dry-run
        uses: actions/checkout@v3
        with:
          repository: 'SSLcom/esigner-codesign'
          path: esigner-codesign

      - name: Import Apple Developer Certificate
        # Prevents keychain from locking automatically for 3600 seconds.
        # temporary commenting this->> if: matrix.os == 'macos-latest' && github.ref == 'refs/heads/main' && !inputs.dry-run
        if: matrix.os == 'macos-latest'  # MacOS Only <<-temporary adding this
        env:
          APPLE_CERTIFICATE: ${{ secrets.MACOS_CSC_LINK }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain
  
      - name: Verify certificate
        if: matrix.os == 'macos-latest'  # MacOS Only
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Build MacOS
        if: matrix.os == 'macos-latest'  # MacOS Only
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
          APPLE_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.MACOS_CSC_LINK }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ secrets.args }}
          projectPath: ${{ env.PROJECT_PATH }}

      - name: Build Windows
        if: matrix.os == 'windows-latest'  # Windows Only 
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ secrets.args }}
          projectPath: ${{ env.PROJECT_PATH }}

          # todo publish      - name: Compile artifacts ${{ inputs.dry-run && '' || 'and upload them to github release' }}
