name: Release
on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean
    secrets:
      MACOS_CSC_LINK:
        description: 'Certificate to sign dmg file'
        required: true
      MACOS_CSC_KEY_PASSWORD:
        description: 'Password to decrypt the certificate file'
        required: true
      MACOS_NOTARIZATION_APPLE_ID:
        description: 'Apple ID used for notarization'
        required: true
      MACOS_NOTARIZATION_TEAM_ID:
        description: 'Team ID used for notarization'
        required: true
      MACOS_NOTARIZATION_PWD:
        description: 'Password used for notarization'
        required: true
      ES_USERNAME:
        description: 'Username to sign exe file'
        required: true
      ES_PASSWORD:
        description: 'Password to sign the exe file'
        required: true
      WINDOWS_CREDENTIAL_ID_SIGNER:
        description: 'Certificate to sign the exe file'
        required: true
      ES_TOTP_SECRET:
        description: 'Password to decrypt the certificate file'
        required: true
      SEGMENT_API_KEY: 
        description: 'Segment API key'
        required: true
      SENTRY_AUTH_TOKEN:
        description: 'Sentry auth token'
        required: true
      SENTRY_DSN:
        description: 'Sentry DSN to perform the requests'
        required: true
      TAURI_SIGNING_PRIVATE_KEY:
        description: 'Private key used to sign the Tauri updater'
        required: true
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD:
        description: 'Password to unlock the private key for Tauri updater'
        required: true
      EXPLORER_TEAM_AWS_ACCESS_KEY_ID:
        description: 'AWS access key to upload artifacts to S3'
        required: true
      EXPLORER_TEAM_AWS_SECRET_ACCESS_KEY:
        description: 'AWS secret access key to upload artifacts to S3'
        required: true
      EXPLORER_TEAM_AWS_DEFAULT_REGION:
        description: 'AWS region where the S3 bucket is located'
        required: true
      EXPLORER_TEAM_S3_BUCKET:
        description: 'AWS S3 bucket name to upload artifacts'
        required: true
      DEV_EXPLORER_TEAM_AWS_ACCESS_KEY_ID:
        description: 'DEV AWS access key to upload artifacts to S3'
        required: true
      DEV_EXPLORER_TEAM_AWS_SECRET_ACCESS_KEY:
        description: 'DEV AWS secret access key to upload artifacts to S3'
        required: true
      DEV_EXPLORER_TEAM_AWS_DEFAULT_REGION:
        description: 'DEV AWS region where the S3 bucket is located'
        required: true
      DEV_EXPLORER_TEAM_S3_BUCKET:
        description: 'DEV AWS S3 bucket name to upload artifacts'
        required: true

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

env:
  VITE_AWS_S3_BUCKET_PUBLIC_URL: ${{ vars.EXPLORER_TEAM_S3_BUCKET_PUBLIC_URL }}
  PROJECT_PATH: src-tauri

jobs:
  draft_release:
    permissions:
      contents: write # Allows this job to create releases

    strategy:
      fail-fast: true
      matrix:
        include:
          - os: macos-latest
            bundles: [dmg, macos]
          - os: windows-latest
            bundles: [nsis]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-targets: true
          cache-provider: github

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - run: npm ci
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - run: npm run build
        env:
          MODE: production
          DRY_RUN: ${{ inputs.dry-run }}
          VITE_SEGMENT_API_KEY: ${{ secrets.SEGMENT_API_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Generate Release Version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: ""
          version_format: ${major}.${minor}.${patch}
          major_pattern: "/^(major|breaking).+/"
          minor_pattern: "/^(minor|feat).+/"
          bump_each_commit: false
          bump_each_commit_patch_pattern: "/^(patch|fix).+/"
          search_commit_body: true
          user_format_type: "json"

      - name: Import Apple Developer certificate
        if: ${{ matrix.os == 'macos-latest' && inputs.dry-run == false }}
        env:
          APPLE_CERTIFICATE: ${{ secrets.MACOS_CSC_LINK }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Apple certificate
        if: ${{ matrix.os == 'macos-latest' && inputs.dry-run == false }}
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Download CodeSignTool
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          $extractPath = "C:\CodeSignTool"
          $version = "v1.3.2"
          $url = "https://github.com/SSLcom/CodeSignTool/releases/download/$version/CodeSignTool-$version-windows.zip"
          $zipPath = "C:\CodeSignTool.zip"

          Invoke-WebRequest -Uri $url -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force

          $jarPath = Get-ChildItem -Path $extractPath -Filter "code_sign_tool-*.jar" -Recurse | Select-Object -First 1
          $javaExe = Get-ChildItem -Path $extractPath -Filter java.exe -Recurse | Select-Object -First 1
          if (-not $jarPath) {
            Write-Error "Could not find CodeSignTool JAR"
            exit 1
          }
          if (-not $javaExe) {
            Write-Error "Could not find java.exe"
            exit 1
          }

          Write-Output "CODESIGN_JAR=$($jarPath.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "CODESIGN_JAVA=$($javaExe.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Set CODESIGN_JAR to $($jarPath.FullName)"
          Write-Host "Set CODESIGN_JAVA to $($javaExe.FullName)"

      - name: Build Release
        if: ${{ inputs.dry-run == false }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
          APPLE_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.MACOS_CSC_LINK }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          SEGMENT_API_KEY: ${{ secrets.SEGMENT_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          ES_USERNAME: ${{ secrets.ES_USERNAME }}
          ES_PASSWORD: ${{ secrets.ES_PASSWORD }}
          WINDOWS_CREDENTIAL_ID_SIGNER: ${{ secrets.WINDOWS_CREDENTIAL_ID_SIGNER }}
          ES_TOTP_SECRET: ${{ secrets.ES_TOTP_SECRET }}
          CODESIGN_JAR: ${{ env.CODESIGN_JAR }}
          CODESIGN_JAVA: ${{ env.CODESIGN_JAVA }}
        with:
          tagName: app-v__VERSION__
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ secrets.args }}
          projectPath: ${{ env.PROJECT_PATH }}

      - name: Build Dry-Run
        if: ${{ inputs.dry-run == true }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
          APPLE_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.MACOS_CSC_LINK }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          SEGMENT_API_KEY: ${{ secrets.SEGMENT_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        with:
          args: ${{ secrets.args }}
          projectPath: ${{ env.PROJECT_PATH }}

      - name: Verify Windows signature
        if: ${{ matrix.os == 'windows-latest' && inputs.dry-run == false }}
        run: |
          SIGNED_EXE=$(find src-tauri/target/release/bundle/nsis -name '*.exe' | head -n1)
          echo "Built artifact: $SIGNED_EXE"
          if [[ -f "$SIGNED_EXE" ]]; then
            echo "Checking signature..."
            powershell.exe -Command "Get-AuthenticodeSignature '$SIGNED_EXE'"
            SIGNATURE_STATUS=$(powershell.exe -Command "(Get-AuthenticodeSignature '$SIGNED_EXE').Status")
            echo "Signature status: $SIGNATURE_STATUS"
            if [[ "$SIGNATURE_STATUS" != "Valid" ]]; then
              echo "❌ EXE is not signed or signature is invalid"
              exit 1
            fi
          else
            echo "❌ Signed EXE not found"
            exit 1
          fi

      - name: Get short SHA
        id: shortsha
        uses: ./.github/actions/get-short-sha

      - name: Upload Release artifacts to S3
        if: ${{ inputs.dry-run == false }}
        uses: ./.github/actions/upload-to-s3
        with:
          aws-access-key-id: ${{ secrets.EXPLORER_TEAM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EXPLORER_TEAM_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.EXPLORER_TEAM_AWS_DEFAULT_REGION }}
          s3-bucket: ${{ secrets.EXPLORER_TEAM_S3_BUCKET }}
          target-dir: draft-release-${{ github.event.repository.name }}-${{ steps.shortsha.outputs.short_sha }}

      - name: Upload Dry-Run artifacts to S3
        if: ${{ inputs.dry-run == true }}
        uses: ./.github/actions/upload-to-s3
        with:
          aws-access-key-id: ${{ secrets.DEV_EXPLORER_TEAM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_EXPLORER_TEAM_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEV_EXPLORER_TEAM_AWS_DEFAULT_REGION }}
          s3-bucket: ${{ secrets.DEV_EXPLORER_TEAM_S3_BUCKET }}
          target-dir: dry-run-${{ github.event.repository.name || 'unknown-repo' }}/pr-${{ github.event.pull_request.number || 'na' }}/run-${{ github.run_number || '0' }}-${{ github.run_id || 'id' }}
